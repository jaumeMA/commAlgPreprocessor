#line 2 "./preprocessor/preProcessorHelper.cpp"

#line 4 "./preprocessor/preProcessorHelper.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer preproc_FlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *preproc_alloc (yy_size_t  );
void *preproc_realloc (void *,yy_size_t  );
void preproc_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int cScanner::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 89
#define YY_END_OF_BUFFER 90
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[370] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   90,   88,   88,   85,
       88,   88,   55,   54,   55,   55,   58,   57,   58,   89,
       33,   35,   34,   37,   32,   36,   84,   83,   84,   52,
       51,   52,   89,   27,   26,   27,   17,   17,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   69,
       61,   63,   69,   60,   64,   65,   69,   69,   62,   69,
       69,   66,   82,   82,   75,   82,   78,   76,   82,   82,

       82,   82,   81,   81,   80,   74,   52,   49,   50,   52,
       42,   39,   43,   44,   39,   45,   39,   47,   47,   41,
       39,   52,   39,   40,   46,   48,   46,   39,   25,   25,
       24,   25,   25,   22,   22,   21,   23,   31,   31,   30,
       31,   31,   29,   29,   28,   20,   88,   88,   88,   82,
       82,   82,   78,   76,   82,   82,   81,   81,   80,    0,
        0,   85,   86,   87,   54,   53,    0,   57,   35,   32,
       83,   51,    0,   59,   26,   16,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   61,   63,    0,
        0,   62,   66,    0,   76,   75,   76,   70,    0,    0,

        0,    0,    0,   81,   81,   81,    0,    0,   79,   80,
       73,   49,   50,   39,   47,   47,   47,    0,   46,   46,
       24,   22,   22,   22,    0,   21,   30,   29,   29,   29,
        0,   28,   20,   18,    0,    0,    0,    0,   76,   76,
       81,   81,   81,    0,    0,   80,   56,    0,    0,    0,
        0,    0,    0,   10,    0,    0,    0,    0,    0,    0,
        0,   67,    0,   70,   77,    0,    0,   81,   81,   81,
       47,   47,   47,   46,   22,   22,   22,   29,   29,   29,
       19,    0,   81,   81,   81,    0,    0,    0,   14,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   68,    0,

       72,   72,   72,   72,    0,   46,    0,    0,   13,   14,
       15,    4,    0,    0,    0,    2,    0,    0,    0,   72,
       72,    0,   72,    0,   46,    0,    0,   15,    4,   11,
        0,    0,    0,    7,    0,   72,   72,   72,    0,   46,
        0,    6,   12,    8,    3,    0,    0,   38,    0,    8,
        0,    5,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    9,    0,    9,    0,   71,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,    1,   21,
       22,   23,   24,    1,   25,   26,   26,   26,   26,   27,
       28,   26,   26,   26,   26,   29,   26,   26,   26,   26,
       26,   30,   31,   26,   26,   32,   26,   26,   26,   26,
        1,   33,    1,    1,   34,    1,   35,   26,   36,   37,

       38,   39,   40,   26,   41,   26,   26,   42,   43,   44,
       45,   46,   26,   47,   48,   49,   50,   26,   51,   52,
       26,   26,    1,   53,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    1,    4,    6,
        1,    7,    8,    1,    8,    9,   10,   11,   11,    1,
        1,    1,    1,    1,   12,   12,   12,   12,   12,   12,
       12,   12,    1,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,    4
    } ;

static yyconst flex_int16_t yy_base[396] =
    {   0,
        0,    3,    6,    9,   11,   19,   23,    0,   76,  129,
       88,   90,   98,  100, 1181, 1180,  102,  104,  181,  231,
      282,    0,  335,    0,  388,    0,  441,    0,  494,    0,
      547,    0,  108,  142,  600,    0, 1185, 1188,  111, 1188,
     1181,  102, 1188, 1188, 1180, 1165, 1188, 1164, 1177, 1188,
     1188,    0, 1188, 1188,  105, 1188, 1188, 1188, 1176, 1188,
     1188, 1175, 1171, 1188, 1188, 1173, 1188,  140, 1188, 1172,
      146, 1140, 1135,  122,  126, 1131, 1124, 1126, 1134, 1188,
      154, 1188, 1165, 1188, 1188, 1188, 1151,  155, 1150,  171,
     1162, 1148, 1188,  172, 1188, 1160, 1188, 1160,    0,  179,

     1154,  163,  652,  188,    9,    0, 1188,  176, 1188, 1157,
     1137, 1150, 1188, 1188, 1188, 1188,  184,  184,  221, 1188,
       94, 1135,  101, 1188,    0, 1188, 1118, 1102, 1188,  195,
     1188, 1151,  193,  228,  233,    0, 1188, 1188,  197, 1188,
     1150,  199,  644,  237,    0, 1188, 1149,  656,  659, 1188,
      257, 1148, 1188, 1148,    0,  208,  664,  671,  145,  207,
      226, 1188, 1188, 1188, 1188, 1188, 1132, 1131,    0,  694,
     1188, 1188, 1141, 1188, 1188, 1188, 1110, 1106,  180, 1107,
     1096,  655, 1106, 1097, 1105, 1102, 1091,  243, 1188, 1121,
     1120, 1119, 1118,  662, 1131, 1188, 1130,    0, 1122,  269,

     1123,  710, 1122,  712,  719,  665,  158,  695, 1188,  722,
     1188,  674, 1188, 1188,  715,  727, 1188,  223,    0, 1089,
     1188,  731,  744, 1188,  637,    0, 1188,  748,  760, 1188,
      647,    0, 1188, 1125,  753, 1124,  709,  757, 1123, 1120,
      765,  772, 1188,  722,  693,  734, 1188, 1076, 1079, 1080,
     1080, 1073, 1068, 1108, 1071, 1071, 1065, 1062, 1059, 1060,
     1053, 1188, 1080,    0, 1188,  794, 1056,  792,  713,  798,
      802, 1188,  734, 1048,  805, 1188,  762,  807, 1188,  779,
     1086,  820,  809, 1188,  824, 1044, 1041, 1082, 1081, 1028,
     1019, 1022, 1022, 1009, 1056, 1012, 1015, 1002, 1188,  838,

      846,  836,  844,    0, 1005,  994,  991,  998, 1033, 1032,
     1031, 1030, 1029,  988,  986,  888,  854,  883,  840,  848,
     1188,  850,    0,  851,  844,  831,  878,  872,  870,  862,
      847,  809,  843,  835,  795,  852, 1188,  858,  808,  793,
      769,  813,  806,  227,  801,  791,  751,    0,  739,  766,
      721,  755,  722,  684,  646,  248,  233,  206,  226,  206,
      138,  137,  152,  146,   83,   93,   55, 1188, 1188,  891,
      903,  915,  927,  939,  951,  963,  975,  987,  992,  997,
     1009, 1013, 1017, 1028, 1040, 1051, 1063, 1065, 1067, 1069,
     1080, 1082, 1093, 1104, 1112

    } ;

static yyconst flex_int16_t yy_def[396] =
    {   0,
      370,  370,  371,  371,  372,  372,  369,    7,  373,  373,
      374,  374,  375,  375,  376,  376,  377,  377,  378,  378,
      369,   21,  369,   23,  369,   25,  369,   27,  369,   29,
      369,   31,  370,  370,  369,   35,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  379,  369,  369,  380,  369,  369,  369,  369,  369,
      369,  369,  381,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  382,  369,
      369,  383,  369,  369,  369,  369,  369,  384,  385,  369,

      369,  369,  369,  369,  386,  387,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  388,  369,  388,  369,  369,  369,
      369,  369,  369,  369,  369,  389,  369,  369,  369,  369,
      369,  369,  369,  369,  390,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  385,  369,  369,  369,  391,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  379,  380,
      369,  369,  381,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  382,  383,  369,  384,  369,  384,  392,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  386,
      369,  369,  369,  369,  369,  369,  369,  369,  388,  388,
      369,  369,  369,  369,  369,  389,  369,  369,  369,  369,
      369,  390,  369,  393,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  391,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  392,  369,  394,  369,  369,  369,  369,
      369,  369,  369,  388,  369,  369,  369,  369,  369,  369,
      393,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  394,

      369,  369,  369,  395,  369,  388,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  395,  369,  388,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  388,
      369,  369,  369,  369,  369,  369,  369,  388,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,    0,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369

    } ;

static yyconst flex_int16_t yy_nxt[1242] =
    {   0,
      369,   39,   40,   41,   39,   40,   41,  369,   44,   45,
      208,   44,   45,   48,   49,  201,   42,   46,  209,   42,
       46,   48,   49,   50,   50,   50,   50,   50,   51,   50,
       50,   50,   50,   50,   50,   52,   50,   52,   52,   52,
       52,   52,   50,   53,   50,   54,   50,   55,   55,   55,
       55,   55,   55,   55,   55,   50,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   50,   50,   50,   50,   50,
       50,   56,   50,   50,   50,   50,   50,   50,  368,   50,
       58,   59,   58,   59,  366,   50,   50,   50,   54,   50,

       61,   62,   61,   62,   65,   66,   65,   66,   50,   39,
      146,  147,  160,  163,  214,  214,  367,  169,  164,  169,
      169,  169,  214,  214,   42,  148,  149,  161,   50,   50,
       50,   50,   50,   50,   56,   50,   50,   50,   50,   50,
       50,  160,   50,   39,  146,  147,  245,  366,   50,   50,
       50,   54,   50,  363,  209,  188,  161,  163,   42,  148,
      149,   50,  164,  179,  182,  180,  163,  365,  181,  183,
      161,  164,  160,  194,  163,  270,  270,  212,  195,  164,
      200,   50,   68,   69,   70,  201,  364,  161,  161,  200,
      202,  202,  161,  202,  201,  163,  160,   71,  160,  215,

      164,  216,  216,  204,  163,  205,  205,  363,  160,  164,
      163,  161,  217,  161,   72,  164,  206,   73,   74,  163,
      250,   75,   76,  161,  164,  217,   77,  251,  350,  206,
       78,   79,   68,   69,   70,  218,  215,  163,  216,  216,
      273,  273,  164,  222,  188,  223,  223,   71,  222,  217,
      223,  223,  228,  362,  229,  229,  224,  361,  238,  161,
      351,  224,  217,  239,   72,  230,  360,   73,   74,  224,
      200,   75,   76,  161,  224,  201,   77,  359,  230,  225,
       78,   79,   80,   81,   82,   83,   80,   80,   80,   80,
       80,   84,   85,   80,   80,   86,   80,   87,   88,   80,

       80,   80,   80,   80,   80,   80,   89,   89,   89,   89,
       89,   89,   89,   89,   80,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   80,   80,   90,   40,   91,   80,
       80,   80,   80,   80,   80,   85,   80,   80,   86,   80,
       87,   88,   80,   80,   80,   80,   80,   80,   80,   92,
       92,   92,   92,   92,   92,   92,   92,   80,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   80,   93,   94,
       95,   96,   93,   97,   98,   93,   99,   93,   93,  100,

      100,  101,  100,   93,  102,  103,  104,   93,   93,   93,
       93,   93,  105,  105,  105,  105,  105,  105,  105,  105,
      106,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
       93,  107,  108,  109,  110,  111,  107,  107,  112,  107,
      113,  114,  115,  115,  116,  115,  107,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  125,  125,  125,  125,
      125,  125,  125,  126,  125,  125,  125,  127,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  128,  129,  130,  131,  132,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      133,  134,  135,  129,  129,  129,  129,  129,  136,  136,
      136,  136,  136,  136,  136,  136,  137,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  129,  138,  139,  140,
      141,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  142,  143,  144,  138,  138,  138,  138,
      138,  145,  145,  145,  145,  145,  145,  145,  145,  138,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  138,

      150,  151,   40,  152,  150,  153,  154,  150,  155,  150,
      150,  150,  150,  150,  150,  150,  156,  157,  158,  150,
      150,  150,  150,  150,  159,  159,  159,  159,  159,  159,
      159,  159,  150,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  150,  200,  277,  277,  254,  234,  201,  228,
      234,  229,  229,  194,  280,  280,  200,  204,  195,  205,
      205,  201,  230,  235,  235,  212,  235,  235,  161,  241,
      206,  242,  242,  358,  236,  230,  241,  236,  242,  242,
      161,  255,  243,  206,  245,  231,  208,  236,  256,  243,

      236,  201,  209,  207,  209,  243,  169,  237,  169,  169,
      169,  200,  243,  200,  200,  244,  201,  357,  201,  201,
      200,  202,  202,  208,  202,  201,  282,  282,  201,  268,
      268,  209,  271,  271,  204,  245,  205,  205,  269,  285,
      285,  272,  215,  209,  216,  216,  356,  206,  275,  275,
      269,  273,  273,  272,  234,  217,  352,  276,  238,  222,
      206,  223,  223,  239,  355,  278,  278,  350,  217,  276,
      235,  235,  224,  161,  279,  228,  354,  229,  229,  277,
      277,  236,  283,  283,  353,  224,  279,  241,  230,  242,
      242,  284,  352,  200,  236,  300,  280,  280,  201,  200,

      243,  230,  345,  284,  201,  301,  301,  343,  301,  268,
      268,  302,  303,  243,  342,  270,  270,  349,  269,  271,
      271,  234,  275,  275,  278,  278,  283,  283,  272,  348,
      269,  276,  347,  279,  346,  284,  334,  282,  282,  300,
      272,  285,  285,  276,  345,  279,  344,  284,  343,  301,
      301,  320,  301,  303,  303,  302,  303,  301,  301,  320,
      301,  303,  303,  330,  321,  336,  336,  338,  338,  336,
      336,  329,  321,  328,  337,  338,  338,  321,  337,  342,
      341,  340,  339,  335,  334,  321,  337,  322,  333,  316,
      337,   38,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,  169,

      169,  169,  169,  169,  170,  170,  170,  170,  170,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  192,  332,  192,  192,  193,  331,  193,  193,  198,
      330,  329,  328,  310,  309,  327,  326,  325,  324,  198,
      199,  199,  319,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  210,  318,  317,  210,  210,  316,  315,  314,
      313,  210,  210,  211,  211,  312,  311,  211,  211,  211,
      211,  211,  211,  211,  211,  219,  219,  226,  226,  232,
      232,  246,  310,  309,  308,  246,  307,  369,  306,  305,
      246,  246,  264,  264,  281,  299,  298,  297,  296,  295,

      281,  281,  281,  281,  281,  304,  294,  293,  292,  254,
      304,  304,  291,  290,  304,  304,  323,  289,  288,  287,
      286,  240,  323,  323,  240,  234,  234,  274,  267,  266,
      265,  197,  197,  191,  191,  263,  262,  261,  260,  259,
      258,  257,  253,  252,  249,  248,  174,  167,  247,  240,
      162,  233,  227,  221,  214,  220,  214,  214,  214,  213,
      203,  197,  196,  191,  162,  191,  190,  189,  187,  186,
      185,  184,  178,  177,  176,  175,  174,  172,  171,  168,
      167,  166,  165,  162,  369,   63,   63,   37,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369
    } ;

static yyconst flex_int16_t yy_chk[1242] =
    {   0,
        0,    1,    1,    1,    2,    2,    2,    0,    3,    3,
      105,    4,    4,    5,    5,  105,    1,    3,  105,    2,
        4,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,  367,    9,
       11,   11,   12,   12,  366,    9,    9,    9,    9,    9,

       13,   13,   14,   14,   17,   17,   18,   18,    9,   33,
       33,   33,   39,   42,  121,  121,  365,   55,   42,   55,
       55,   55,  123,  123,   33,   33,   33,   39,    9,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   68,   10,   34,   34,   34,  159,  364,   10,   10,
       10,   10,   10,  363,  159,   81,   68,   71,   34,   34,
       34,   10,   71,   74,   75,   74,   88,  362,   74,   75,
       81,   88,   90,   94,  102,  207,  207,  108,   94,  102,
      100,   10,   19,   19,   19,  100,  361,   90,   94,  104,
      100,  100,  108,  100,  104,  117,  130,   19,  139,  118,

      117,  118,  118,  104,  133,  104,  104,  360,  160,  133,
      142,  130,  118,  139,   19,  142,  104,   19,   19,  156,
      179,   19,   19,  160,  156,  118,   19,  179,  344,  104,
       19,   19,   20,   20,   20,  118,  119,  161,  119,  119,
      218,  218,  161,  134,  188,  134,  134,   20,  135,  119,
      135,  135,  144,  359,  144,  144,  134,  358,  151,  188,
      344,  135,  119,  151,   20,  144,  357,   20,   20,  134,
      200,   20,   20,  151,  135,  200,   20,  356,  144,  134,
       20,   20,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,  103,  225,  225,  182,  148,  103,  143,
      149,  143,  143,  194,  231,  231,  206,  103,  194,  103,
      103,  206,  143,  148,  148,  212,  149,  149,  194,  157,
      103,  157,  157,  355,  148,  143,  158,  149,  158,  158,
      212,  182,  157,  103,  245,  143,  208,  148,  182,  158,

      149,  208,  245,  103,  208,  157,  170,  148,  170,  170,
      170,  202,  158,  204,  269,  157,  202,  354,  204,  269,
      205,  202,  202,  210,  202,  205,  237,  237,  210,  204,
      204,  210,  215,  215,  205,  246,  205,  205,  204,  244,
      244,  215,  216,  246,  216,  216,  353,  205,  222,  222,
      204,  273,  273,  215,  235,  216,  352,  222,  238,  223,
      205,  223,  223,  238,  351,  228,  228,  350,  216,  222,
      235,  235,  223,  238,  228,  229,  349,  229,  229,  277,
      277,  235,  241,  241,  347,  223,  228,  242,  229,  242,
      242,  241,  346,  268,  235,  266,  280,  280,  268,  270,

      242,  229,  345,  241,  270,  266,  266,  343,  266,  268,
      268,  266,  266,  242,  342,  270,  270,  341,  268,  271,
      271,  282,  275,  275,  278,  278,  283,  283,  271,  340,
      268,  275,  339,  278,  335,  283,  334,  282,  282,  300,
      271,  285,  285,  275,  333,  278,  332,  283,  331,  300,
      300,  302,  300,  302,  302,  300,  300,  301,  301,  303,
      301,  303,  303,  330,  302,  320,  320,  322,  322,  336,
      336,  329,  303,  328,  320,  338,  338,  302,  336,  327,
      326,  325,  324,  319,  318,  303,  320,  302,  317,  316,
      336,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  379,

      379,  379,  379,  379,  380,  380,  380,  380,  380,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  382,  315,  382,  382,  383,  314,  383,  383,  384,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  384,
      385,  385,  298,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  386,  297,  296,  386,  386,  295,  294,  293,
      292,  386,  386,  387,  387,  291,  290,  387,  387,  387,
      387,  387,  387,  387,  387,  388,  388,  389,  389,  390,
      390,  391,  289,  288,  287,  391,  286,  281,  274,  267,
      391,  391,  392,  392,  393,  263,  261,  260,  259,  258,

      393,  393,  393,  393,  393,  394,  257,  256,  255,  254,
      394,  394,  253,  252,  394,  394,  395,  251,  250,  249,
      248,  240,  395,  395,  239,  236,  234,  220,  203,  201,
      199,  197,  195,  193,  192,  191,  190,  187,  186,  185,
      184,  183,  181,  180,  178,  177,  173,  168,  167,  154,
      152,  147,  141,  132,  128,  127,  122,  112,  111,  110,
      101,   98,   96,   92,   91,   89,   87,   83,   79,   78,
       77,   76,   73,   72,   70,   66,   63,   62,   59,   49,
       48,   46,   45,   41,   37,   16,   15,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./preprocessor/preProcessor.l"
/********************************************************
 * preProcessor.l
 ********************************************************/
#line 11 "./preprocessor/preProcessor.l"
#include "cPreProcessorDefs.h"
#include <vector>
#include <string>

typedef std::vector<std::string> stringArray;
#include "cScanner.h"

typedef preprocessor::cParser::token token;

static int numComments = 0;


#line 835 "./preprocessor/preProcessorHelper.cpp"

#define INITIAL 0
#define comment 1
#define comment_line 2
#define include 3
#define include_filename 4
#define ident_macro 5
#define ident_compute 6
#define literal 7
#define ident_error 8
#define macro 9
#define define_macro 10
#define define_args 11
#define define_definition 12
#define compute 13
#define error 14
#define pragma 15
#define line 16
#define code 17

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 53 "./preprocessor/preProcessor.l"


#line 982 "./preprocessor/preProcessorHelper.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 370 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1188 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 57 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(compute); return token::COMPUTE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 58 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(line); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(pragma); return token::PRAGMA; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 60 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(error); return token::ERROR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(error); return token::WARNING; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 62 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(define_macro); return token::DEFINE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(code); return token::UNDEFINE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 64 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(include); return token::INCLUDE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 65 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(include); return token::INCLUDE_NEXT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 66 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(compute); return token::IF; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 67 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(compute); return token::IFDEF; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(compute); return token::IFNDEF; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(compute); return token::ELIF; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(code); return token::ELSE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; BEGIN(code); return token::END; }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 72 "./preprocessor/preProcessor.l"
{ BEGIN(code); incrCurrLine(); return token::END_LINE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "./preprocessor/preProcessor.l"
{ }
	YY_BREAK



case 18:
YY_RULE_SETUP
#line 78 "./preprocessor/preProcessor.l"
{
                                        std::string tmp = std::string(yytext,yyleng);
                                        size_t separatorTokenPos = tmp.find(" ");
                                        std::string lineStr = tmp.substr(0,separatorTokenPos);

                                        yylval->tokensArr = new std::vector<preprocessor::cToken>();
                                        yylval->tokensArr->push_back(cToken(lineStr,tokenType::IDENT));

                                        BEGIN(code);

                                        return token::BUILTIN_LINE;
                                    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "./preprocessor/preProcessor.l"
{
                                        std::string tmp = std::string(yytext,yyleng);
                                        size_t separatorTokenPos[2] = {tmp.find_first_of(" "),tmp.find_last_of(" ")};
                                        std::string lineStr[2] = {tmp.substr(0,separatorTokenPos[0]),tmp.substr(separatorTokenPos[1])};

                                        yylval->tokensArr = new std::vector<preprocessor::cToken>();
                                        yylval->tokensArr->push_back(cToken(lineStr[0],tokenType::IDENT));
                                        yylval->tokensArr->push_back(cToken(lineStr[1],tokenType::IDENT));

                                        BEGIN(code);

                                        return token::BUILTIN_LINE;
                                    }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 103 "./preprocessor/preProcessor.l"
{ BEGIN(code); incrCurrLine(); return token::END_LINE; }
	YY_BREAK



case 21:
YY_RULE_SETUP
#line 108 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::IDENT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 109 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::NUMBER; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 110 "./preprocessor/preProcessor.l"
{ BEGIN(ident_error); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 111 "./preprocessor/preProcessor.l"
{ BEGIN(code); incrCurrLine(); return token::END_LINE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 112 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::SYMBOLS; }
	YY_BREAK


case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 116 "./preprocessor/preProcessor.l"
{ BEGIN(error); incrCurrLine(); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 117 "./preprocessor/preProcessor.l"
{ };
	YY_BREAK




case 28:
YY_RULE_SETUP
#line 123 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::IDENT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 124 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::NUMBER; }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 125 "./preprocessor/preProcessor.l"
{ BEGIN(code); incrCurrLine(); return token::END_LINE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 126 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::SYMBOLS; }
	YY_BREAK



case 32:
YY_RULE_SETUP
#line 131 "./preprocessor/preProcessor.l"
{ BEGIN(code); return token::IDENT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "./preprocessor/preProcessor.l"
{ BEGIN(include_filename); return token::INCLUDE_COMMA_DELIM; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "./preprocessor/preProcessor.l"
{ BEGIN(include_filename); return token::INCLUDE_GL_DELIM; }
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 137 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::INCLUDE_FILENAME; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 138 "./preprocessor/preProcessor.l"
{ BEGIN(code); return token::INCLUDE_COMMA_DELIM; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 139 "./preprocessor/preProcessor.l"
{ BEGIN(code); return token::INCLUDE_GL_DELIM; }
	YY_BREAK




case 38:
YY_RULE_SETUP
#line 145 "./preprocessor/preProcessor.l"
{ yylval->unit_sym = yytext; return token::DEFINED; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "./preprocessor/preProcessor.l"
{ yylval->unit_sym = yytext; return token::BINARY_OP; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "./preprocessor/preProcessor.l"
{ yylval->unit_sym = yytext; return token::TERNARY_LEFT_OP; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "./preprocessor/preProcessor.l"
{ yylval->unit_sym = yytext; return token::TERNARY_RIGHT_OP; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "./preprocessor/preProcessor.l"
{ yylval->unit_sym = yytext; return token::UNARY_OP; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "./preprocessor/preProcessor.l"
{ yylval->unit_sym = yytext; return token::TLPAREN; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "./preprocessor/preProcessor.l"
{ yylval->unit_sym = yytext; return token::TRPAREN; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 152 "./preprocessor/preProcessor.l"
{ yylval->unit_sym = yytext; return token::TCOMMA; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 153 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::IDENT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 154 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::NUMBER; };
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 155 "./preprocessor/preProcessor.l"
{ BEGIN(ident_compute); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 156 "./preprocessor/preProcessor.l"
{ }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 157 "./preprocessor/preProcessor.l"
{ BEGIN(code); incrCurrLine(); return token::END_LINE; }
	YY_BREAK


case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 161 "./preprocessor/preProcessor.l"
{ BEGIN(compute); incrCurrLine(); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 162 "./preprocessor/preProcessor.l"
{ };
	YY_BREAK




case 53:
YY_RULE_SETUP
#line 168 "./preprocessor/preProcessor.l"
{ yy_pop_state(); numComments = 0; }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 169 "./preprocessor/preProcessor.l"
{ incrCurrLine(); numComments++; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 170 "./preprocessor/preProcessor.l"
{  }
	YY_BREAK



case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 175 "./preprocessor/preProcessor.l"
{ incrCurrLine(); numComments++; }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 176 "./preprocessor/preProcessor.l"
{ yy_pop_state(); incrCurrLine(); yylval->val= numComments; numComments = 0; return token::COMMENT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 177 "./preprocessor/preProcessor.l"
{ }
	YY_BREAK



case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 183 "./preprocessor/preProcessor.l"
{ yy_pop_state(); yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::LITERAL; }
	YY_BREAK



case 60:
YY_RULE_SETUP
#line 188 "./preprocessor/preProcessor.l"
{ BEGIN(define_args); yylval->unit_sym = yytext; return token::TLPAREN; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 189 "./preprocessor/preProcessor.l"
{ BEGIN(define_definition); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 190 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::IDENT; }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 191 "./preprocessor/preProcessor.l"
{ BEGIN(code); incrCurrLine(); return token::END_LINE; }
	YY_BREAK


case 64:
YY_RULE_SETUP
#line 195 "./preprocessor/preProcessor.l"
{ BEGIN(define_definition); yylval->unit_sym = yytext; return token::TRPAREN; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 196 "./preprocessor/preProcessor.l"
{ yylval->unit_sym = yytext; return token::TCOMMA; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 197 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::IDENT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 198 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::IDENT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 199 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::IDENT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 200 "./preprocessor/preProcessor.l"
{ }
	YY_BREAK




case 70:
YY_RULE_SETUP
#line 206 "./preprocessor/preProcessor.l"
{
                                                    std::string tmp = std::string(yytext,yyleng);
                                                    //remove spaces
                                                    tmp.erase(std::remove_if(tmp.begin(),tmp.end(),[](const char& entry){return std::isspace(entry);}),tmp.end());
                                                    yylval->tokensArr = new std::vector<preprocessor::cToken>();
                                                    size_t separatorTokenPos = tmp.find("#");

                                                    //this one is for sure!
                                                    yylval->tokensArr->push_back(cToken(tmp.substr(separatorTokenPos+1),tokenType::IDENT));

                                                    return token::BUILTIN_STRINGIZED;
                                                }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 218 "./preprocessor/preProcessor.l"
{
                                                    yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng;
                                                    return token::BUILTIN_COLLAPSE_VARIADIC;
                                                }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 222 "./preprocessor/preProcessor.l"
{
                                                    std::string tmp = std::string(yytext,yyleng);
                                                    //remove spaces
                                                    tmp.erase(std::remove_if(tmp.begin(),tmp.end(),[](const char& entry){return std::isspace(entry);}),tmp.end());
                                                    yylval->tokensArr = new std::vector<preprocessor::cToken>();

                                                    do
                                                    {
                                                        size_t separatorTokenPos1 = tmp.find("##");

                                                        if(separatorTokenPos1 != std::string::npos)
                                                        {
                                                            yylval->tokensArr->push_back(cToken(tmp.substr(0,separatorTokenPos1),tokenType::IDENT));
                                                            tmp = tmp.substr(separatorTokenPos1+2);
                                                        }
                                                        else
                                                        {
                                                            yylval->tokensArr->push_back(cToken(tmp,tokenType::IDENT));
                                                            tmp.clear();
                                                        }
                                                    }
                                                    while(!tmp.empty());

                                                    return token::BUILTIN_CONCAT;
                                                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 247 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::SYMBOLS; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 248 "./preprocessor/preProcessor.l"
{ BEGIN(ident_macro); }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 249 "./preprocessor/preProcessor.l"
{ incrCurrLine(); BEGIN(code); return token::END_LINE; }
	YY_BREAK


case 76:
YY_RULE_SETUP
#line 253 "./preprocessor/preProcessor.l"
{ BEGIN(macro); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 254 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::SYMBOLS; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 255 "./preprocessor/preProcessor.l"
{ yyless(0); yy_push_state(literal); yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 256 "./preprocessor/preProcessor.l"
{
                                                        yylval->sym.m_data = yytext;
                                                        int identSize = 0;
                                                        for(int count=0;count<yyleng;count++)
                                                        {
                                                            if(std::isspace(yytext[count]) || yytext[count] == '(')
                                                            {
                                                                identSize = count;
                                                                break;
                                                            }
                                                        }

                                                        yylval->sym.m_leng = identSize;
                                                        yyless(identSize);
                                                        return token::IDENT_CALL;
                                                }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 272 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::IDENT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 273 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::NUMBER; };
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 274 "./preprocessor/preProcessor.l"
{ yylval->sym.m_data = yytext; yylval->sym.m_leng = yyleng; return token::SYMBOLS; }
	YY_BREAK



case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 279 "./preprocessor/preProcessor.l"
{ BEGIN(define_definition); incrCurrLine(); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 280 "./preprocessor/preProcessor.l"
{ };
	YY_BREAK


case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 284 "./preprocessor/preProcessor.l"
{ incrCurrLine(); return token::END_LINE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 285 "./preprocessor/preProcessor.l"
{ yy_push_state(comment); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 286 "./preprocessor/preProcessor.l"
{ yy_push_state(comment_line); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 287 "./preprocessor/preProcessor.l"
{
                                        std::string msg = std::string("Receiving token ") + std::string(yytext,yyleng);
                                        LOG(msg.c_str())

                                        yyless(0);
                                        BEGIN(code);
                                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(comment_line):
case YY_STATE_EOF(include):
case YY_STATE_EOF(include_filename):
case YY_STATE_EOF(ident_macro):
case YY_STATE_EOF(ident_compute):
case YY_STATE_EOF(literal):
case YY_STATE_EOF(ident_error):
case YY_STATE_EOF(macro):
case YY_STATE_EOF(define_macro):
case YY_STATE_EOF(define_args):
case YY_STATE_EOF(define_definition):
case YY_STATE_EOF(compute):
case YY_STATE_EOF(error):
case YY_STATE_EOF(pragma):
case YY_STATE_EOF(line):
case YY_STATE_EOF(code):
#line 294 "./preprocessor/preProcessor.l"
{
                                        if(!empty())
                                        {
                                            const ProcessedFile& processor = m_filesToProcess.back();
                                            std::istream* str = processor.m_pStream;

                                            if(str)
                                            {
                                                char tmp[32];
                                                memset(tmp,0,sizeof(char)*32);
                                                sprintf(tmp,"Leaving with %d", (size_t)str->tellg());
                                                std::string msg = std::string(tmp,32);
                                                LOG(msg.c_str())
                                            }
                                        }
                                        if(finishedStream())
                                        {
                                            yyterminate();
                                        }
                                    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 315 "./preprocessor/preProcessor.l"
ECHO;
	YY_BREAK
#line 1670 "./preprocessor/preProcessorHelper.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	preproc_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	preproc_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					preproc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preproc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 370 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 370 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 369);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preproc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preproc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preproc_free((void *) b->yy_ch_buf  );

	preproc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preproc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preproc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) preproc_alloc(new_size  );

		else
			(yy_start_stack) = (int *) preproc_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preproc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preproc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preproc_free (void * ptr )
{
	free( (char *) ptr );	/* see preproc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 315 "./preprocessor/preProcessor.l"



